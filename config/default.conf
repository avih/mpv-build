# mpv-build default configuration
config_title="mpv-build"

# Relative paths are relative to the root of the mpv-build dir.
# The files ./config/default.conf and ./user.conf are sourced one after the
# other, so user.conf may override (except config_local_prefix - see below).
# Preferably, user.conf only contains lines with modified values and not a full
# copy of default.conf with only few modified values.

# global configuration.

# CLI arguments can modify $config_projects .
# The projects are processed at the order they appear, ignoring dependencies.
# If FOO is not at $config_projects (after processing CLI), then it's ignored
# by the update/clean/build scripts, and ./build will try to use it globally as
# a system lib if FOO wasn't built after the last clean - like any other lib
# which wasn't built locally.
config_projects="libass ffmpeg mpv"

# The local install prefix (exported as absolute path). Cannot be overridden at
# ./user.conf because ./clean deletes it recursively and unconditionally, which
# is destructive if configured incorrectly - we trust only config/default.conf
config_local_prefix="./build_libs"  # non configurable at user.conf

# per-project config.

# CLI arguments can modify $config_foo_update values.
# Except "none", update fetches and checkout according to $config_foo_update:
#   "rebase"  git pull -r
#   "master"  origin/master
#   "release" the highest release tag with prefix $config_foo_release_prefix
#   "@BAR"    git checkout "BAR" ("master" checkout like "@origin/master")
#   "none"    skip update (except initial clone if the dir doesn't exist)

# NOTE: earlier versions of mpv-build used <root>/$libfoo as source dirs of the
# libs. Move the dirs to source_libs/ or override the config to avoid new clone.

# Mandatory project variables (prefix config_foo_): source, git, update .
# Optional: release_prefix, update_post (the latter is a hook, see below).
# Optional variables must be set at default.conf (to empty value if unused).

config_fribidi_source="./source_libs/fribidi"
config_fribidi_git="http://anongit.freedesktop.org/git/fribidi/fribidi.git"
config_fribidi_update="release"
config_fribidi_release_prefix=
config_fribidi_update_post=

config_libass_source="./source_libs/libass"
config_libass_git="https://github.com/libass/libass.git"
config_libass_update="master"
config_libass_release_prefix=
config_libass_update_post=

config_ffmpeg_source="./source_libs/ffmpeg"
config_ffmpeg_git="https://github.com/FFmpeg/FFmpeg.git"
config_ffmpeg_update="master"
config_ffmpeg_release_prefix="n"
config_ffmpeg_update_post=

config_mpv_source="./mpv"
config_mpv_git="https://github.com/mpv-player/mpv.git"
config_mpv_update="master"
config_mpv_release_prefix="v"
config_mpv_update_post="mpv_bootstrap_waf"
mpv_bootstrap_waf() { scripts/mpv-bootstrap; }  # ignoring the arguments

# Optional user hooks (valid values: empty/[path-to-]program/function-name).

# invoked with the stage ("clean-pre", "build-post", etc) as argument.
# To be fully generic, should take into account $config_projects and the source
# paths for the active projects - which are exported.
# Existing dirs are exported as full path, otherwise as configured (typically
# always full paths except maybe before first update) .
config_update_pre=
config_update_post=
config_build_pre=
config_build_post=
config_clean_pre=
config_clean_post=
