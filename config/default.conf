# Relative paths are relative to the root of the mpv-build dir.
# The files ./config/default.conf and ./user.conf are sourced one after the
# other, so user.conf may override anything.
# Preferably, user.conf only contains lines with modified values and not a full
# copy of default.conf with only few modified values.

# Global configuration.

# The main project. Used for prints, install and few more.
config_main="mpv"

# CLI arguments can modify $config_projects .
# The projects are processed at the order they appear, ignoring dependencies.
# If FOO is not at $config_projects (after processing CLI), then it's ignored
# by the update/clean/build scripts, and ./build will try to use it globally as
# a system lib if FOO wasn't built after the last clean - like any other lib
# which wasn't built locally.
config_projects="libass ffmpeg mpv"

# The local install prefix for the libs (exported as absolute path)
config_local_prefix="./prefix"

# The default shallowness if not using "-" or "+" update syntax (see below).
# supported values: "yes", "no" (anything not "yes" is considered "no").
# If "yes", it generally ends up using --depth=... with fetch or pull.
config_git_shallow=yes

# Depth when using shallow. 2 allows incremental fetch with shallow even if the
# last commit at the remote was replaced, e.g. with force push.
config_git_shallow_depth=2

# Note on repo shallowness:
# Even if the config ends up shallow, --depth=... will not be used if the repo
# at the dir is not shallow. That is, it will not change a normal repo into
# shallow one. The other way (shallow repo, config not shallow) will be
# respected and --depth=... will _not_ be used, however, this doesn't magically
# make the repo "full", and git will fetch as many commits as it needs - if it
# can fetch incrementally from a local commit then that's all it will fetch,
# and if not then the entire history - but the repo remains in "shallow mode".
# To manually change shallowness of a repo:
#   To make a repo shallow: git fetch --depth=1 <remote>
#   To unshallow a repo:    git fetch --unshallow <remote>
# If you don't care about the repo dir (i.e. it doesn't have local commits you
# want to keep etc), the easiest way to change shallowness is deleting its
# source dir and update it from scratch - which will respect the shallow config.

# per-project config.

# CLI arguments can modify $config_foo_update values.
# $config_foo_update controls the update, usually [clone+] fetch + checkout:
#   "head"    latest remote origin/HEAD
#   "release" highest remote release tag with prefix $config_foo_release_prefix
#   "rebase"  "git pull -r" (needs to already be at a tracked branch)
#   "^BAR"    latest state of the remote [fuzzy] tag/branch/ref/PR BAR
#   "@BAZ"    "git fetch && git checkout BAZ"
#   "!QUX"    doesn't do anything other than executing hook (see below) QUX
#   "none"    skip update of this project completely.
# ^BAR is smart-ish: BAR may be a full or a tag/branch(head) ref suffix, or PR,
#   e.g. my-tag, tags/my-tag, and refs/tags/my-tag likely resolve the same ref,
#   though a fuller ref reduces ambiguities. pull/42 or PR42 or 42 also works.
# Shallow: except "none" and "!QUX", the value can be prefixed with '-' for
#   shallow or with '+' to not use shallow - overriding $config_git_shallow.
#   E.g. "-head" or "-^v0.25" are shallow, and "+head" or "+^v0.25" are not.
#   However, it still will not use shallow if an existing repo isn't shallow.

# Mandatory config_foo_ values: source, update. [git - only if internal update].
# Optional: release_prefix, update_post (the latter is a hook, see below).
# Optional variables must be set at default.conf (to empty value if unused).

config_fribidi_source="./source/fribidi"
config_fribidi_git="http://anongit.freedesktop.org/git/fribidi/fribidi.git"
config_fribidi_update="release"
config_fribidi_release_prefix=
config_fribidi_update_post=

config_libass_source="./source/libass"
config_libass_git="https://github.com/libass/libass.git"
config_libass_update="head"
config_libass_release_prefix=
config_libass_update_post=

config_ffmpeg_source="./source/ffmpeg"
config_ffmpeg_git="https://github.com/FFmpeg/FFmpeg.git"
config_ffmpeg_update="head"
config_ffmpeg_release_prefix="n"
config_ffmpeg_update_post=

config_mujs_source="./source/mujs"
config_mujs_git="https://github.com/ccxvii/mujs.git"
config_mujs_update="head"
config_mujs_release_prefix=
config_mujs_update_post=

config_shaderc_source="./source/shaderc"
config_shaderc_git="https://github.com/google/shaderc"
config_shaderc_update="head"
config_shaderc_release_prefix=
config_shaderc_update_post="./scripts/shaderc-update-deps-latest"

config_crossc_source="./source/crossc"
config_crossc_git="https://github.com/rossy/crossc"
config_crossc_update="head"
config_crossc_release_prefix=
config_crossc_update_post=crossc_finalize_submodules
crossc_finalize_submodules() (  # subshell to stay at pwd
    set -x && cd "$config_crossc_source" && git submodule update --init
)

config_mpv_source="./source/mpv"
config_mpv_git="https://github.com/mpv-player/mpv.git"
config_mpv_update="head"
config_mpv_release_prefix="v"
config_mpv_update_post="mpv_bootstrap_waf"
mpv_bootstrap_waf() { scripts/mpv-bootstrap; }  # ignoring the arguments

# Optional user hooks (valid values: empty/[path-to-]program/function-name).

# invoked with the stage ("clean-pre", "build-post", etc) as argument.
# To be fully generic, should take into account $config_projects and the source
# paths for the active projects - which are exported.
# Existing dirs are exported as full path, otherwise as configured (typically
# always full paths except maybe before first update) .
config_update_pre=
config_update_post=
config_build_pre=
config_build_post=
config_clean_pre=
config_clean_post=

# Normally this isn't required, but on systems with non-default prefix which
# contains a package we build ourselves, there could be conflicts in -I and -L
# order of the compile/link commands. This can happen on OS X with macports or
# homebrew, or even in msys2 normal setup if e.g. ffmpeg is installed globally,
# or on linux if /usr/local has ffmpeg-dev installed for instance.
# Best is ensuring a package we build is not also installed at such prefix.
# Note that e.g. ffmpeg-dev at the global default prefix (e.g. /usr) shouldn't
# be an issue. The only issues are with additional non-default prefixes.
#
# Before using this, make sure to read tools/ccmpp and tools/auto_ccmpp
# config_build_pre=multi_prefix_hack
# Auto OSX or msys2 or else /usr/local
#   multi_prefix_hack() { eval "$(tools/auto_ccmpp)"; }
# Or e.g. deprioritize /usr/opt
#   multi_prefix_hack() { eval "$(tools/auto_ccmpp /usr/opt)"; }
