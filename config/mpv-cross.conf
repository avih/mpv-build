# mpv cross setup, feel free to replace config_build_cross_pre with your own

# Generic cross build setup. Note: ffmpeg/mpv also need OS - which we don't set
# $1: host, $2: arch (for ffmpeg)
cross_prebuild_generic() {
   local host="$1"; local arch="$2"
   local host_var="$(echo $host | sed s/[-.]/_/g)"
   local extra_bin="$config_local_prefix/bin/$host"
   local pcpath="$config_local_prefix/lib/pkgconfig"
   local cmd=

   # some scripts use "pkg-config" and "cmake", try to use host-specific ones
   mkdir -p "$extra_bin"
   for cmd in pkg-config cmake; do
      if which "$host-$cmd" > /dev/null; then  # ln -s doesn't work everywhere
         printf '#!/bin/sh\nexec '$host-$cmd' "$@"' > "$extra_bin/$cmd"
         chmod +x "$extra_bin/$cmd"
      fi
   done

   export PATH="$extra_bin:${PATH-}"
   export PKG_CONFIG_PATH_${host_var}="$pcpath"  # MXE
   export PKG_CONFIG_PATH_CUSTOM="$pcpath"     # arch

   conf_prepend fribidi_opts_config "--host=$host"
   conf_prepend libass_opts_config  "--host=$host"
   conf_prepend mujs_opts_build     "CC=$host-gcc"
   # nothing to do for shaderc - it will use the host-specific $extra-bin/cmake
   conf_prepend crossc_opts_build   "CXX=$host-g++"
   conf_prepend ffmpeg_opts_config  "--cross-prefix=$host- --arch=$arch"
   conf_prepend mpv_opts_config     "TARGET=$host"
}

# --target-os=$1 for ffmpeg, DEST_OS=$2 for mpv
cross_prebuild_os() {
   conf_prepend ffmpeg_opts_config  "--target-os=$1"
   conf_prepend mpv_opts_config     "DEST_OS=$2"
}

# $1: host (only called if not empty)
cross_prebuild_auto() {
   local host="$config_host"
   local triplet="$($host-gcc -dumpmachine)"
   local arch="${triplet%%-*}"

   cross_prebuild_generic "$host" "$arch"

   # TODO: untested except mingw
   case "$triplet" in
        *mingw*) conf_prepend shaderc_opts_config -DENABLE_GLSLANG_BINARIES=OFF
                 cross_prebuild_os mingw32 win32
                 ;;
      *freebsd*) cross_prebuild_os freebsd freebsd;;
      *openbsd*) cross_prebuild_os openbsd openbsd;;
              *) cross_prebuild_os linux   linux;;
   esac
}
